@page "/munkak"
@using AutoSzereloMuhely.Domain
@using AutoSzereloMuhely.Client.Services

@inject IMunkaService MunkaService
@inject NavigationManager NavigationManager

<h3>Munka kezelés</h3>

<button class="btn btn-primary mb-3" @onclick="NavigateToAdd">+ Új munka</button>

@if (munkak is null)
{
    <p>Munkaadatok betöltése folyamatban...</p>
}
else if (!munkak.Any())
{
    <p>Nincs rögzített munka.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Rendszám</th>
                <th>Gyártás éve</th>
                <th>Kategória</th>
                <th>Leírás</th>
                <th>Súlyosság</th>
                <th>Állapot</th>
                <th>Műveletek</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var munka in munkak)
            {
                <tr>
                    <td title="@MunkaOraEstimator.CountMunkaora(munka)">@munka.Rendszam</td>
                    <td>@munka.GyartasEve</td>
                    <td>@munka.Kategoria</td>
                    <td>@munka.Leiras</td>
                    <td>@munka.Sulyossag</td>
                    <td>@munka.Allapot</td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteMunkaAsync(munka.MunkaID))">Törlés</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Munka>? munkak;

    protected override async Task OnInitializedAsync()
    {
        munkak = await MunkaService.GetMunkaAsync();
    }

    private void NavigateToAdd()
    {
        NavigationManager.NavigateTo("/munka/add");
    }

    private async Task DeleteMunkaAsync(int id)
    {
        await MunkaService.DeleteMunkaAsync(id);
        munkak = await MunkaService.GetMunkaAsync();
    }
    
}
